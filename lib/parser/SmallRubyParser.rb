#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.7.1
# from Racc grammar file "".
#

require 'racc/parser.rb'

#
module SR
  class Parser < Racc::Parser

module_eval(<<'...end SmallRubyParser.y/module_eval...', 'SmallRubyParser.y', 29)
    def parse(tokens)
        @tokens = tokens
        do_parse
    end

    def next_token
        @tokens.shift
    end
...end SmallRubyParser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
     2,     2,     2,     7,     7,     7,    16,     8,     8,     8,
     2,    22,     2,     7,     3,    21,     4,     8,    25,    26,
     5,    12,    13,    14,    19,    23,    27,    28 ]

racc_action_check = [
     4,    13,    14,     4,    13,    14,    14,     4,    13,    14,
    18,    16,     0,    18,     1,    16,     2,    18,    20,    20,
     3,     6,     7,     8,    15,    17,    24,    26 ]

racc_action_pointer = [
    10,    14,    13,    20,    -2,   nil,    17,    19,    20,   nil,
   nil,   nil,   nil,    -1,     0,    20,     8,    21,     8,   nil,
    11,   nil,   nil,   nil,    22,   nil,    24,   nil,   nil ]

racc_action_default = [
   -13,   -13,   -13,   -13,   -12,    29,   -13,   -13,   -13,    -9,
   -10,   -11,    -1,   -12,   -12,   -13,   -13,   -13,   -12,    -2,
   -13,    -4,    -5,    -7,   -13,    -3,   -13,    -8,    -6 ]

racc_goto_table = [
     6,     1,    18,    20,   nil,   nil,   nil,   nil,   nil,    15,
    17,   nil,   nil,   nil,    24 ]

racc_goto_check = [
     2,     1,     4,     5,   nil,   nil,   nil,   nil,   nil,     2,
     2,   nil,   nil,   nil,     2 ]

racc_goto_pointer = [
   nil,     1,    -4,   nil,   -12,   -13,   nil ]

racc_goto_default = [
   nil,     9,   nil,    10,   nil,   nil,    11 ]

racc_reduce_table = [
  0, 0, :racc_error,
  4, 11, :_reduce_1,
  4, 13, :_reduce_2,
  3, 14, :_reduce_3,
  2, 14, :_reduce_4,
  1, 15, :_reduce_5,
  3, 15, :_reduce_6,
  4, 16, :_reduce_7,
  5, 16, :_reduce_8,
  1, 12, :_reduce_none,
  1, 12, :_reduce_none,
  1, 12, :_reduce_none,
  0, 12, :_reduce_12 ]

racc_reduce_n = 13

racc_shift_n = 29

racc_token_table = {
  false => 0,
  :error => 1,
  "module" => 2,
  :CONST => 3,
  "end" => 4,
  "class" => 5,
  "(" => 6,
  ")" => 7,
  "," => 8,
  "def" => 9 }

racc_nt_base = 10

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]
Ractor.make_shareable(Racc_arg) if defined?(Ractor)

Racc_token_to_s_table = [
  "$end",
  "error",
  "\"module\"",
  "CONST",
  "\"end\"",
  "\"class\"",
  "\"(\"",
  "\")\"",
  "\",\"",
  "\"def\"",
  "$start",
  "module",
  "exp",
  "class",
  "args",
  "argsList",
  "def" ]
Ractor.make_shareable(Racc_token_to_s_table) if defined?(Ractor)

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'SmallRubyParser.y', 3)
  def _reduce_1(val, _values, result)
     result = [:module,val[1],val[2]]
    result
  end
.,.,

module_eval(<<'.,.,', 'SmallRubyParser.y', 5)
  def _reduce_2(val, _values, result)
     result = [:class,val[1],val[2]]
    result
  end
.,.,

module_eval(<<'.,.,', 'SmallRubyParser.y', 7)
  def _reduce_3(val, _values, result)
    result = [val[1]]
    result
  end
.,.,

module_eval(<<'.,.,', 'SmallRubyParser.y', 9)
  def _reduce_4(val, _values, result)
    result = []
    result
  end
.,.,

module_eval(<<'.,.,', 'SmallRubyParser.y', 11)
  def _reduce_5(val, _values, result)
    result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'SmallRubyParser.y', 13)
  def _reduce_6(val, _values, result)
    result.push(val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'SmallRubyParser.y', 15)
  def _reduce_7(val, _values, result)
    result = [:def,val[1],[],val[2]]
    result
  end
.,.,

module_eval(<<'.,.,', 'SmallRubyParser.y', 17)
  def _reduce_8(val, _values, result)
    result = [:def,val[1],val[2],val[3]]
    result
  end
.,.,

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

module_eval(<<'.,.,', 'SmallRubyParser.y', 23)
  def _reduce_12(val, _values, result)
    result = []
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
end   # module SR

#
