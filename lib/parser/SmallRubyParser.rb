#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.7.1
# from Racc grammar file "".
#

require 'racc/parser.rb'

#
module SR
  class Parser < Racc::Parser

module_eval(<<'...end SmallRubyParser.y/module_eval...', 'SmallRubyParser.y', 38)
    def parse(tokens)
        @tokens = tokens
        do_parse
    end

    def next_token
        @tokens.shift
    end
...end SmallRubyParser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
     2,     9,     2,     7,     3,     2,     9,     8,     7,    28,
    14,    15,     8,    27,     4,    14,    15,     2,     9,     5,
     7,    21,     2,     9,     8,     7,    16,    14,    15,     8,
    32,    33,    14,    15,    17,    18,    19,    24,    25,    29,
    31,    34,    35,    36 ]

racc_action_check = [
     4,     4,     0,     4,     1,    17,    17,     4,    17,    21,
     4,     4,    17,    21,     2,    17,    17,    18,    18,     3,
    18,    18,    23,    23,    18,    23,     6,    18,    18,    23,
    26,    26,    23,    23,     7,     8,     9,    19,    20,    22,
    24,    30,    31,    33 ]

racc_action_pointer = [
     0,     4,    11,    19,    -2,   nil,    22,    31,    32,    26,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,     3,    15,    34,
    34,     6,    35,    20,    34,   nil,    23,   nil,   nil,   nil,
    37,    35,   nil,    40,   nil,   nil,   nil ]

racc_action_default = [
   -19,   -19,   -19,   -19,   -18,    37,   -19,   -19,   -19,   -19,
   -12,   -13,   -14,   -15,   -16,   -17,    -1,   -18,   -18,   -19,
   -19,   -19,   -19,   -18,    -9,    -2,   -19,    -4,    -5,    -7,
   -19,   -19,    -3,   -19,    -8,   -10,    -6 ]

racc_goto_table = [
     6,     1,    23,    26,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    20,    22,   nil,   nil,   nil,   nil,    30 ]

racc_goto_check = [
     2,     1,     4,     5,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,     2,     2,   nil,   nil,   nil,   nil,     2 ]

racc_goto_pointer = [
   nil,     1,    -4,   nil,   -16,   -18,   nil,   nil,   nil ]

racc_goto_default = [
   nil,    10,   nil,    11,   nil,   nil,    12,    13,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  4, 15, :_reduce_1,
  4, 17, :_reduce_2,
  3, 18, :_reduce_3,
  2, 18, :_reduce_4,
  1, 19, :_reduce_5,
  3, 19, :_reduce_6,
  4, 20, :_reduce_7,
  5, 20, :_reduce_8,
  3, 21, :_reduce_9,
  5, 21, :_reduce_10,
  3, 22, :_reduce_11,
  1, 16, :_reduce_none,
  1, 16, :_reduce_none,
  1, 16, :_reduce_none,
  1, 16, :_reduce_none,
  1, 16, :_reduce_none,
  1, 16, :_reduce_none,
  0, 16, :_reduce_18 ]

racc_reduce_n = 19

racc_shift_n = 37

racc_token_table = {
  false => 0,
  :error => 1,
  "module" => 2,
  :CONST => 3,
  "end" => 4,
  "class" => 5,
  "(" => 6,
  ")" => 7,
  "," => 8,
  "def" => 9,
  "." => 10,
  "=" => 11,
  :NUMBER => 12,
  :STRING => 13 }

racc_nt_base = 14

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]
Ractor.make_shareable(Racc_arg) if defined?(Ractor)

Racc_token_to_s_table = [
  "$end",
  "error",
  "\"module\"",
  "CONST",
  "\"end\"",
  "\"class\"",
  "\"(\"",
  "\")\"",
  "\",\"",
  "\"def\"",
  "\".\"",
  "\"=\"",
  "NUMBER",
  "STRING",
  "$start",
  "module",
  "exp",
  "class",
  "args",
  "argsList",
  "def",
  "send",
  "assign" ]
Ractor.make_shareable(Racc_token_to_s_table) if defined?(Ractor)

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'SmallRubyParser.y', 3)
  def _reduce_1(val, _values, result)
     result = [:module,val[1],val[2]]
    result
  end
.,.,

module_eval(<<'.,.,', 'SmallRubyParser.y', 5)
  def _reduce_2(val, _values, result)
     result = [:class,val[1],val[2]]
    result
  end
.,.,

module_eval(<<'.,.,', 'SmallRubyParser.y', 7)
  def _reduce_3(val, _values, result)
    result = val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'SmallRubyParser.y', 9)
  def _reduce_4(val, _values, result)
    result = []
    result
  end
.,.,

module_eval(<<'.,.,', 'SmallRubyParser.y', 11)
  def _reduce_5(val, _values, result)
    result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'SmallRubyParser.y', 13)
  def _reduce_6(val, _values, result)
    result.push(val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'SmallRubyParser.y', 15)
  def _reduce_7(val, _values, result)
    result = [:def,val[1],[],val[2]]
    result
  end
.,.,

module_eval(<<'.,.,', 'SmallRubyParser.y', 17)
  def _reduce_8(val, _values, result)
    result = [:def,val[1],val[2],val[3]]
    result
  end
.,.,

module_eval(<<'.,.,', 'SmallRubyParser.y', 19)
  def _reduce_9(val, _values, result)
     result = [:send,val[0],val[2]]
    result
  end
.,.,

module_eval(<<'.,.,', 'SmallRubyParser.y', 21)
  def _reduce_10(val, _values, result)
     result = [:send,val[0],val[2]]
    result
  end
.,.,

module_eval(<<'.,.,', 'SmallRubyParser.y', 23)
  def _reduce_11(val, _values, result)
    result = [:assign,val[0],val[2]]
    result
  end
.,.,

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

# reduce 15 omitted

# reduce 16 omitted

# reduce 17 omitted

module_eval(<<'.,.,', 'SmallRubyParser.y', 32)
  def _reduce_18(val, _values, result)
    result = []
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
end   # module SR

#
